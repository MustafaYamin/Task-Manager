"use client"; //using client because hooks are client side renderd
import { useRef, useState } from "react"; //this will import useState to the page
import { nanoid } from "nanoid";
import { Bounce, ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function HomePage() {
  //we use useState to store our tasks in it's array in other words it will store the task in the array and it will update our UI by showing the task
  const [tasks, setTasks] = useState([]);

  //We are using useRef to access and manipulate the input field
  const inputReference = useRef(null);

  const handleAddTasks = () => {
    //This gets the value in input field as text / string
    let inputValue = inputReference?.current?.value as string;
    /*This if statement notify the user to enter a task add task or 
    enter key is pressed on empty input field and the return statement 
    prevents the state to update when input field is empty */
    if (!inputValue) {
      toast.warn("Please enter a Task!", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: false,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
        transition: Bounce,
      });
      return;
    }

    //This updates the list in useState and its unique id to store is generated from the package nanoid
    setTasks([{ title: inputValue, id: nanoid() }, ...tasks]);
    /*This notify the user when a task is entered*/
    toast.success("Task added successfully", {
      position: "top-right",
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: false,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "dark",
      transition: Bounce,
    });

    //This will clear the input field after entering the task
    if (inputReference.current) {
      inputReference.current.value = "";
    }
  };

  //This function listens the keyboard event of pressing Enter key
  //and when it is pressed it calls the handleAddTask function from above
  function onKeyEnter(my_key: React.KeyboardEvent) {
    if (my_key.key === "Enter") {
      handleAddTasks();
    }
  }

  /* The setter function below runs a filter method on the tasks array 
   the e in the perameter of deleteTask represents the id of each task
   the filter method runs a loop and adds every task in the new tasks array
   and deletes "does not include" the one for which delete button was pressed  */
  function deleteTask(e: string) {
    setTasks(tasks.filter((elem) => elem.id !== e));
    /*This notify the user when a task is deleted*/
    toast.warn("Task was deleted", {
      position: "top-right",
      autoClose: 5000,
      hideProgressBar: false,
      closeOnClick: false,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: "dark",
      transition: Bounce,
    });
  }

  return (
    <div>
      <div className="text-xl text-white pb-4 text-center pt-3 bg-slate-500 h-14    font-bold leading-5 ">
        Task Manager
      </div>
      <div className="m-6 p-10 bg-blue-300 w-96 rounded-xl">
        <div className="flex gap-3">
          <input
            //onkeyDown listens When the ENTER key is pressed and then call the onKeyEnter function
            onKeyDown={onKeyEnter}
            //This uses useRef to capture the value user puts in input field
            ref={inputReference}
            className="border-2 pl-1 outline-none  rounded"
          />
          {/* This buton will add tasks to list */}
          <button
            //onClick listens to the mouse event and calls the handleAddTasks function when add task button is clicked
            onClick={handleAddTasks}
            className="text-white ml-2 rounded bg-gray-400 px-3"
          >
            Add Tasks
          </button>
        </div>

        {/* This ul is the list of tasks added */}
        <ul>
          {/* Below is a terenarry operator and when there 
          is no task " task.length == 0 " it shows No Taska Available 
          but when the user enters a task it runs the map method on the
           tasks array further detail is in the comment in return*/}
          {tasks.length == 0 ? (
            <h1>No Task Available</h1>
          ) : (
            tasks.map((elem, index) => {
              return (
                /* In the div below users tasks are showed it recognizes each 
                task by the key attribute for the map method and that key is a 
                unique id generated by nanoid */
                <div
                  className="mt-3  bg-gray-200 m rounded-lg py-1 pl-2 justify-between flex items-center  text-[#2b2a2a]"
                  key={elem.id}
                >
                  {/*  The line below helps to show the numbring of each task
                  simply using the index of the array but because index starts
                  from 0 we have added 1 in index and the " . " is to make 
                  a premium experience  */}
                  {index + 1 + ". "}

                  {/* The line below showcasews the text in the task by using
                  the title value of the setter function/setTasks function */}
                  {elem.title}

                  <button
                    /* The onClick runs a callback function which is calling the 
                  deleteTask function and elem.id helps the filter method recognize 
                  the unique id and eleminate them */
                    onClick={() => {
                      deleteTask(elem.id);
                    }}
                    className="bg-red-400 px-4 mr-2 font-semibold rounded-sm "
                  >
                    Delete
                  </button>
                </div>
              );
            })
          )}
        </ul>
        <ToastContainer />
      </div>
    </div>
  );
}
